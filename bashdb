#!/usr/bin/env bash

# bash lacks data structures and cannot store arbitrary data in variables
# everything will be encoded in base64 with no newlines

# example
# filesystem-like structure
# advantages: simpler and better locking, it's possible to symlink(?)
# disadvantages: looks stupid, lots of metadata

# dbid/
#   name: encoded-base64-string
#   table begin
#     tablename: encoded...
#     definitions start
#       fieldname1: ...
#       fieldname2: ...
#       fieldname3: ...
#       fieldname4: ...
#     definitions end
#     records begin
#       record begin
#         field1: ...
#         field2: ...
#         field3: ...
#         field4: ...
#       record end
#       record begin
#         field1: ...
#         field2: ...
#         field3: ...
#         field4: ...
#       record end
#     records end
#   table end
#   table begin
#     tablename: ...
#       ...
#   table end
# db end

# locking is hard
# only one user can edit the database at a time, but it's better than nothing
# with noclobber

write () {
  # $1 = SQL-ish statement
  set -o noclobber
  local printed=false
  until (echo "$$" > "${db_id}-${table_id}-${record_id}.lock") 2> /dev/null; do
    $printed && continue
    echo "Database locked, waiting"
    printed=true
  done
  trap 'rm -f "${db_id}.lock"' EXIT
  dostuff
  trap - EXIT
}


# 



